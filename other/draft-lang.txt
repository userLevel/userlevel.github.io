MORE′ (MORE Prime)

ttyp1 software is developing **pico′** (*i.e.*, “pico prime”) as an ‘outliner’ or an ‘outline processor’ in the tradition of such software titles as the Omni Group’s OmniOutliner, however rather replicating OmniOutliner, or Symantec MORE or NetManage ECCO Pro, all powerful outliners, ttyp1 software is dedicated to following, to the greatest extent possible, the relevant maxims of Dieter Rams, that good design is as little design as possible, with a focus on purity and a devotion to simplicity.

Unburdened by non–essentials, pico′ is intensely focused only upon the essential aspects and elements of the software’s intended function and performance; this focus on design is not only visual, but design in this circumstance encompasses the technological elements of pico′. The algorithms, the data structures and the code all exemplify and represent to the complete extent possible these maxims.

The “Less, but better.” — „Weniger, aber besser.“ aesthetic extends to all components of the software development process: the software interface, software interaction and software function, as seen by the user and as not seen by the user. This directly dovetails with Steve Jobs: “When you’re a carpenter making a beautiful chest of drawers, you’re not going to use a piece of plywood on the back, even though it faces the wall and nobody will ever see it. You’ll know it’s there, so you’re going to use a beautiful piece of wood on the back. For you to sleep well at night, the aesthetic, the quality, has to be carried all the way through.”

---


ttyp1 software has the primary objective of building from scratch 85% of the functionality that users most often take advantage of in frequent, regular and ordinary use when working in OmniOutliner, presented with a user interface and method of interaction that is naturally fluid and simple to use all while exhibiting minimalist design in a performant application that does not make the user wait for it, despite being a web–based program due to the significant backend of pico′ being written in idiomatic, best–practices Go code, documented well and utilizing only native Go written by the authors of pico′.

----

Not to be confused with the “pico” text editor that is a portion of the overall pine/alpine email application, pico’ (pico–prime) is, analogously to the pico text editor, simple, minimal and minimalist, however in this case, pico’ is a minimal web–based outline processor (an “outliner”); that is, those features currently implemented and those that may be considered for implementation in a future version are or would be orthogonal to the other or existing command set. Ideally, there should be one way to perform an action, being the most efficient means of doing so, and there shouldn’t be additional means of performing the same action. Other than the non–duplication of commands’ functionalities, atto is also an opinionated application, meaning that there are few if any configurable options (e.g., there is only one color scheme/interface theme and it is set, rather than being changeable; similarly, there is no included functionality for modifying the command key shortcuts. This lack of configurability or extensibility goes toward the goals of simplicity, minimalism and the general opinionated nature of pico’, in the sense that the developers believe that they have made the best choices for users.

The developers hold their opinion that the user should defer to and adapt the pico’ developers’ decisions because both (1) the set of commands implemented by pico’ and (2) how these commands are implemented are the result of significant research conducted by the developers on the usage, functionality and interfaces of a significant number of past outliners from the time of their particular popularity in the late ‘80s as well as those which have been recently developed during a recent surge or a small renaissance in interest in outline processors.


Destructive backspace




With respect to the design—the user interface and the user experience—of pico’, the authors followed the principles of good design that Dieter Rams developed during his career as an industrial designer for Braun, adapted to software development. Good design makes software useful—software is made to be useful, but it must also satisfy functional, psychological and aesthetic requirements in order for the user to enjoy or appreciate using the product. The aesthetic qualities of software contribute to our personal well-being, and it is only well-executed software that is able to be beautiful in both a technological and a visual sense: a user appreciates when software not only looks good but when it anticipates behaviors and use cases, facilitating them for the user. The software should, ideally, be self-explanatory, as good design makes a product understandable and clarifies the product’s structure and its interaction with other software with which may be a component of the same workflow. Good design provides these advantages in relative silence rather than being loud; by fulfilling a purpose in the same way a tool fulfills its purpose, good design is unobtrusive and is neither decorative nor distracting. The software should be neutral and restrained, so that the user is able to express his or her own self-expression, nor should the software attempt to manipulate the user by making promises of functionality or features that do not actually exist in a fully formed and functional state. There must be honesty in the software’s relationship with the user and as part of this honesty, good design is long lasting, avoiding being fashionable and thus cannot be antiquated. Also as part of this honesty, nothing about the operation of the software must be arbitrary or left to chance, as care and accuracy must be taken by the developers to show the user the respect of anticipating how he or she might use the software, down to the last possible detail of how the user may interact with the software.


principles of design
regex algo
text algo
